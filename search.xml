<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F22%2F6%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[###1.利用burpsuite爆破 抓包 ctrl+I将包复制到intruder模块，因为要对password参数进行爆破，所以在password参数的内容两边加$ 选中Payloads，载入字典，点击Start attack进行爆破###2.手工sql注入 username:admin&#39;or&#39;1&#39;=&#39;1-username: admin&#39;#]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F22%2F0%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86%2F</url>
    <content type="text"><![CDATA[判断操作系统 windows不区分大小写，Linux区分大小写 IIS只存在于windows，nginx多用于Linux 站长之家：seo综合查询 2.数据库类型 探测不到原因：改端口，内网服务器，站库分离 数据库默认端口(1-65535)： Mysql 3306 Mssql 1433Oracle 1521&gt; 判断网站架设环境 浏览器审查元素 （F12)中network中接收的数据包 常见的搭建分析： PHP跟MysqlASP跟access msqlAspx跟mssql（sql server）Jsp跟mssql Oracle 网站架构 开源CMS搭建 or 非开源CMS搭建 （通过网站标识或者指纹识别工具判断） 阿里云，腾讯云 or 小中型IDC空间商 or 企业内部服务器（火狐浏览器插件） 单一站点 or 多域名站点 or 多目录站点 or 混合站点（一个ip端口不同网站不同）]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F22%2F1XSS%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[xss: 全称cross-site scripting，是用于攻击Web客户端而不是服务器端，其最大的特点是能把恶意的JS或HTML代码注入到用户浏览的网页上。而XSS漏洞的存在，主要是由于Web应用程序对用户的输入没有进行严格的过滤所导致的，当攻击者把恶意代码注入到网页时，用户只要访问该网页就会执行其中的恶意代码。 反射型xss（非持久）: 反射型xss一般是指自定义内容发送的服务器，服务器返回到客户端显示时产生的脚本执行。常见在搜索功能中。 检测方式： 输入数据提交，看返回的内容是不是还是原来的内容，若是则很大可能存在漏洞。有时候返回的网页信息可能没有显示原来输入的内容，但是可以通过查看网页源代码可以查看输入的内容有没有注入到网页的html代码中，若有则也明显存在。主要用于窃取客户端cookie和钓鱼欺骗。 12345&lt;script&gt;alert(/xss/)&lt;/script&gt;&lt;a href=https://www.baidu.com&gt;click&lt;/a&gt;&lt;a href=’’ onclick=alert(&apos;xss&apos;)&gt;type&lt;/a&gt;去相应的网站访问不到相应的图片文件时就报错弹窗：&lt;img src=http://10.10.10.137/alan.jpg onerror=alert(&apos;xss&apos;)&gt; 存储型xss:（持久） 存储型xss是指用户输入的xss脚本存储到了数据库中，例如留言板功能，每次查看留言时都会触发。 检测方式： 在留言板内容中输入&lt;script&gt;alert(document.cookie)&lt;/script&gt;弹出cookie信息 DOM型xss: 其实是一种特殊类型的反射型XSS，它是基于DOM文档对象模型的一种漏洞。客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。基于这个特性，就可以利用JS脚本来实现XSS漏洞的利用。 DOM: 全称Document Object Model，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。 检测方式：构造payload&lt;script&gt;alert(/xss/)&lt;/script&gt; 触发弹窗‘；alert(/xss/)//(注意) javascript中var 用于声明变量，为变量声明文本值时加引号如var $a=&#39;xxx&#39;; 所以要闭合前一个单引号，注释后一个单引号才能触发弹窗。 防御方法: DOM型XSS主要是由客户端的脚本通过DOM动态地输出数据到页面而不是依赖于将数据提交给服务器端，而从客户端获得DOM中的数据在本地执行，因而仅从服务器端是无法防御的。 避免客户端文档重写、重定向或其他敏感操作，同时避免使用客户端数据，这些操作尽量在服务器端使用动态页面来实现； - 分析和强化客户端JS代码，特别是受到用户影响的DOM对象，注意能直接修改DOM和创建HTML文件的相关函数或方法，并在输出变量到页面时先进行编码转义，如输出到HTML则进行HTML编码、输出到则进行JS编码。 4. 利用XSS漏洞 利用innerHTML：用于纂改页面&lt;script&gt;document.body.innerHTML=&quot;&lt;div style=visibility:visible;&gt;&lt;h1&gt;This is DOM XSS&lt;/h1&gt;&lt;/div&gt;&quot;;&lt;/script&gt; 利用 重定向：&lt;script&gt;window.location=&#39;https://www.baidu.com&#39;&lt;/script&gt;&lt;iframe SRC=&quot;http://www.sina.com&quot; height=&quot;0&quot; width=&quot;0&quot;&gt;&lt;/iframe&gt;5. xss字符过滤 标签的S大写 如果源码匹配大小写： &lt;scr&lt;script&gt;ipt&gt;alert(&quot;xss&quot;)&lt;/scr&lt;/script&gt;ipt&gt; 如果源码中发现传到后台的字符串中如果存在“script”（大小写不分），就会返回error：&lt;img src=1 onerror=alert(&quot;xss&quot;)&gt;name=&lt;a herf=&quot;x&quot; onclick=&quot;alert(/xss/)&quot;&gt;test&lt;/a&gt; 传到后台的字符串中如果存在“alert”（大小写不分），就会返回error：&lt;script&gt;eval(String.fromCharCode(97, 108, 101, 114, 116, 40, 34, 65, 78, 89, 34, 41))&lt;/script&gt;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F22%2F7Sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[原理： 网站数据传输中，接受变量传递的值未进行过滤，导致直接带入数据库查询执行的操作问题。 必备条件： 1.变量接受2.带入数据库查询执行3.不存在过滤（可尝试绕过) Access注入 联合查询 ：判断注入（order by 6），猜解表名(union select 1,2,3 form admin)，猜解列名，猜解数据猜解不到的时候：1.字典文件收集 2.Access偏移注入 逐字猜解：查表，查列（and exists(select 列名 from 表名)），查数据(1. 确定长度 2. 确定ascll码)12and(select top 1 len(列名)from admin)=5and(select top 1 asc(mid(列名,位数,1))from admin)=97 Mysql注入mysql5.0以上自带一个information_schema数据库：存储所有数据库信息数据库名：database()数据库用户：user()数据库版本：version()操作系统：@@version_compile_os符号“.”：代表下一级information_schema.tables：数据库下tables表名，存储所有数据库下的表名信息的表information_schema.columuns：存储所有数据库下的列名信息的表Table_schema：数据库名Table_name：表名Column_name：列名查询数据库名test下的所有表名：union select tabale_name,2,3 from information_schema_tables where table_schema=test]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F22%2FSql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%2F</url>
    <content type="text"><![CDATA[title: SQL注入漏洞tags: 渗透测试categories: 笔记 原理： 网站数据传输中，接受变量传递的值未进行过滤，导致直接带入数据库查询执行的操作问题。 必备条件： 1.变量接受2.带入数据库查询执行3.不存在过滤（可尝试绕过) Access注入 联合查询 ：判断注入（order by 6），猜解表名(union select 1,2,3 form admin)，猜解列名，猜解数据猜解不到的时候：1.字典文件收集 2.Access偏移注入 逐字猜解：查表，查列（and exists(select 列名 from 表名)），查数据(1. 确定长度 2. 确定ascll码)12and(select top 1 len(列名)from admin)=5and(select top 1 asc(mid(列名,位数,1))from admin)=97 Mysql注入mysql5.0以上自带一个information_schema数据库：存储所有数据库信息数据库名：database()数据库用户：user()数据库版本：version()操作系统：@@version_compile_os符号“.”：代表下一级information_schema.tables：数据库下tables表名，存储所有数据库下的表名信息的表information_schema.columuns：存储所有数据库下的列名信息的表Table_schema：数据库名Table_name：表名Column_name：列名查询数据库名test下的所有表名：union select tabale_name,2,3 from information_schema_tables where table_schema=test]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F22%2F%E6%B8%97%E9%80%8F%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[##1.BurpSuiteBurpSuite核心组件站点目标（target）：提供站点地图，网站的目录架构截断代理（proxy）：可以截获和修改浏览器与目标Web应用之间的通讯数据爬虫程序（spider）：获得目标Web应用内容和功能应用扫描（scanner）：自动扫描目标Web应用漏洞入侵检测（intruder）：通过自定义攻击数据，发现应用漏洞重发包器（repeater）：重发独立的请求数据序列分析器（sequencer）：测试会话随机性解码器（decoder）：对数据进行编码、解码对比工具（comparer）：可对两个文件内容进行对比，找出差异扩展（extender）：可以让你加载BurpSuite的扩展，使用你自己的或第三方代码来扩展Burp Suit的功能设置（options）：对BurpSuite的一些设置告警器（alerts）：BurpSuite告警信息]]></content>
  </entry>
</search>
